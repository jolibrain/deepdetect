
pipeline {
  agent any
  stages {
    stage('Init') {
      steps {
        script {
            def common = load("ci/Jenkinsfile.common")
            common.cancelPreviousBuilds()
        }
        sh 'printenv | sort'
      }
    }
    stage('Preparing prebuilt datasets') {
      steps {
        sh '''
set
mkdir -p build
cd build
cmake .. -DBUILD_TESTS=ON -DUSE_CUDNN=ON -DUSE_SIMSEARCH=ON -DUSE_TSNE=ON -DUSE_XGBOOST=ON -DUSE_TORCH=ON -DUSE_NCNN=ON -DUSE_TENSORRT=ON -DCUDA_ARCH="-gencode arch=compute_61,code=sm_61"
cd -
tar -cvf examples-${GIT_COMMIT}.tar build/examples
'''
        archiveArtifacts(artifacts: 'examples-*.tar')
      }
    }
    post {
      always {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true);
      }
      success {
        catchError {
          rocketSend(channel: 'build', message: 'Build succeed' ,color: 'green' )
        }
      }
      aborted {
        catchError {
          rocketSend(channel: 'build', message: 'Build superseded or aborted')
        }
      }
      unstable {
        catchError {
          rocketSend(channel: 'build', message: 'Build failed', color: 'red')
        }
      }
      failure {
        catchError {
          rocketSend(channel: 'build', message: 'Build failed', color: 'red')
        }
      }
    }
  }
}
