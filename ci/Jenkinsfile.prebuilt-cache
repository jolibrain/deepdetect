
pipeline {
  agent any
  stages {
    stage('Init') {
      steps {
        script {
            def common = load("ci/Jenkinsfile.common")
            common.cancelPreviousBuilds()
        }
        sh 'printenv | sort'
      }
    }
    stage('Building') {
      steps {
        sh '''
export PATH="/usr/lib/ccache/:$PATH"
mkdir -p build
cd build
cmake ..  \
    -DBUILD_TESTS=ON  \
    -DUSE_HTTP_SERVER_OATPP=ON \
    -DUSE_CUDNN=ON  \
    -DUSE_FAISS=ON  \
    -DUSE_SIMSEARCH=ON  \
    -DUSE_TSNE=ON  \
    -DUSE_XGBOOST=ON  \
    -DUSE_TORCH=ON  \
    -DUSE_NCNN=ON  \
    -DUSE_TENSORRT=ON  \
    -DUSE_TENSORRT_OSS=ON  \
    -DCUDA_ARCH="-gencode arch=compute_61,code=sm_61"
schedtool -B -n 1 -e ionice -n 1 make -j24 protobuf caffe_dd pytorch Multicore-TSNE faisslib ncnn xgboost cpp-netlib tensorrt-oss oatpp oatpp-swagger oatpp-zlib
ccache -s

# Remove cmake files
find . -type d -name "CMakeFiles" -exec rm -rf {} +
find . -type f -name "CMakeCache.txt" -exec rm -rf {} +
find . -type f -name "cmake_install.cmake" -exec rm -rf {} +

# For compat with current job
touch prebuilt-cache-${GIT_COMMIT}
tar -cvzf prebuilt-cache-${GIT_COMMIT}.tar.gz prebuilt-cache-${GIT_COMMIT}
rm -f prebuilt-cache-${GIT_COMMIT}
'''
      }
    }
    stage('Preparing archive') {
      steps {
        sh '''tar -cvzf prebuilt-cache-${GIT_COMMIT}.tar.gz build'''
      }
    }
    stage('Saving archive') {
      steps {
        archiveArtifacts(artifacts: 'build/**/*.*')
      }
    }
  }
  post {
    always {
      cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true);
    }
    success {
      catchError {
        rocketSend(channel: 'build', message: 'Build succeed' ,color: 'green' )
      }
    }
    aborted {
      catchError {
        rocketSend(channel: 'build', message: 'Build superseded or aborted')
      }
    }
    unstable {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
    failure {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
  }
}
