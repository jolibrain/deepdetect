
pipeline {
  agent any
  stages {
    stage('Init') {
      steps {
        script {
            def common = load("ci/Jenkinsfile.common")
            common.cancelPreviousBuilds()
        }
        sh 'printenv | sort'
      }
    }
    stage('Building pytorch') {
      steps {
        sh '''
export PATH="/usr/lib/ccache/:$PATH"

set
mkdir -p build
cd build
cmake .. -DUSE_TORCH=ON -DCUDA_ARCH="-gencode arch=compute_61,code=sm_61"
make -j24 pytorch
ccache -s
'''
      }
    }
    stage('Preparing archive') {
      steps {
        sh 'tar -cvf pytorch-${GIT_COMMIT}.tar build/pytorch'
      }
    }
    stage('Saving archive') {
      steps {
        archiveArtifacts(artifacts: 'pytorch-*.tar')
      }
    }
  }
  post {
    always {
      cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true);
    }
    success {
      catchError {
        rocketSend(channel: 'build', message: 'Build succeed' ,color: 'green' )
      }
    }
    aborted {
      catchError {
        rocketSend(channel: 'build', message: 'Build superseded or aborted')
      }
    }
    unstable {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
    failure {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
  }
}
