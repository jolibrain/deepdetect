pipeline {
  agent any
    triggers {
      cron('H 22 * * 1-5')
    }
  stages {
    stage('Init') {
      steps {
        script {
          def common = load("ci/Jenkinsfile.common");
          common.cancelPreviousBuilds();
        }
      }
    }
    stage('Building docker images') {
      parallel {
        stage('cpu') { steps { sh 'tools/build-docker-images.sh cpu' } }
        stage('gpu') { steps { sh 'tools/build-docker-images.sh gpu' } }
        stage('gpu_torch') { steps { sh 'tools/build-docker-images.sh gpu_torch' } }
        // stage('gpu_tf') { steps { sh 'tools/build-docker-images.sh gpu_tf' } }
        stage('gpu_tensorrt') { steps { sh 'tools/build-docker-images.sh gpu_tensorrt' } }
      }
    }
  }
  post {
    always {
      sh 'docker image prune -f'
    }
    success {
      cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true);
      rocketSend(channel: 'build', message: 'Build succeed');
    }
    unsuccessful {
      cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true);
      rocketSend(channel: 'build', message: 'Build failed');
    }
  }
}
