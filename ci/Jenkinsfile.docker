String cron_info = BRANCH_NAME == "master" ? "H 22 * * 1-5" : ""

pipeline {
  agent { node { label 'docker' } }
  triggers {
    cron(cron_info)
  }
  stages {
    stage('Init') {
      steps {
        script {
          def common = load("ci/Jenkinsfile.common");
          common.cancelPreviousBuilds();
        }
        sh 'printenv | sort'
      }
    }
    stage('Build docker cpu image') { steps {
      catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh 'ci/build-docker-images.sh cpu'
      }
    }}
    stage('Build docker gpu image') { steps {
      catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh 'ci/build-docker-images.sh gpu'
      }
    }}
    stage('Build docker gpu_torch image') { steps {
      catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh 'ci/build-docker-images.sh gpu_torch'
      }
    }}
    stage('Build docker gpu_tf image') { steps {
      catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh 'echo "gpu_tf build disabled"'
        sh 'exit 1'
        sh 'ci/build-docker-images.sh gpu_tf'
      }
    }}
    stage('Build docker gpu_tensorrt image') { steps {
      catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh 'ci/build-docker-images.sh gpu_tensorrt'
      }
    }}
    stage('Update dockerhub readme') {
      when {
       expression { BRANCH_NAME == "master" }
      }
      steps {
        sh '''
wget https://github.com/christian-korneck/docker-pushrm/releases/download/v1.6.0/docker-pushrm_linux_amd64
chmod +x docker-pushrm_linux_amd64
./docker-pushrm_linux_amd64 jolibrain/deepdetect_cpu
./docker-pushrm_linux_amd64 jolibrain/deepdetect_gpu
./docker-pushrm_linux_amd64 jolibrain/deepdetect_gpu_torch
./docker-pushrm_linux_amd64 jolibrain/deepdetect_gpu_tensorrt
'''
      }
    }
  }
  post {
    always {
      sh 'docker image prune -f'
      cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true);
    }
    success {
      catchError {
        rocketSend(channel: 'build', message: 'Build succeed' ,color: 'green' )
      }
    }
    aborted {
      catchError {
        rocketSend(channel: 'build', message: 'Build superseded or aborted')
      }
    }
    unstable {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
    failure {
      catchError {
        rocketSend(channel: 'build', message: 'Build failed', color: 'red')
      }
    }
  }
}
