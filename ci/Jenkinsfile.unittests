pipeline {
  agent any
  stages {
    stage('Init') { steps {
      script {
          def common = load("ci/Jenkinsfile.common")
          common.cancelPreviousBuilds()
      }
    }}

    stage('Installating prebuilt examples/ datasets') {
      steps {
        copyArtifacts(projectName: 'deepdetect-examples-dataset/master')
        sh '''
tar -xf examples-*.tar
rm -f examples-*.tar
'''
      }
    }
    stage('Configure') {
      steps {
        sh '''
export PATH="/usr/lib/ccache/:$PATH"
cd build && cmake .. -DBUILD_TESTS=ON -DUSE_CUDNN=ON -DUSE_SIMSEARCH=ON -DUSE_TSNE=ON -DUSE_XGBOOST=ON -DUSE_TORCH=ON -DUSE_NCNN=ON -DUSE_TENSORRT=ON -DCUDA_ARCH="-gencode arch=compute_61,code=sm_61"
'''
      }
    }
    stage('Check codestyle') {
      steps {
        sh 'cd build && make clang-format-check'
      }
    }

    stage('Installing prebuilt pytorch') {
      steps {
        copyArtifacts(projectName: 'deepdetect-pytorch/master')
        sh '''
tar -xf pytorch-*.tar
rm -f pytorch-*.tar
touch build/CMakeFiles/pytorch-complete
'''
      }
    }

    stage('Build GPU') {
      steps {
        sh '''
export PATH="/usr/lib/ccache/:$PATH"
cd build
schedtool -B -n 1 -e ionice -n 1 make -j 6
ccache -s
'''
      }
    }
    stage('Tests GPU') {
      steps {
        lock('GPU') {
          sh 'cd build && ctest -V -E "http"'
          }
      }
    }
  }
  post {
      success {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true)
        rocketSend(channel: 'build', message: 'Build succeed')
      }
      unsuccessful {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true, cleanWhenUnstable: true, cleanupMatrixParent: true, deleteDirs: true)
        rocketSend(channel: 'build', message: 'Build failed')
      }
  }
}
