# Inception Network (GoogLeNet variant) Batch Normalization
name: "GoogleNet_BN"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
#    mean_value: 104
#    mean_value: 117
#    mean_value: 123
     mean_file: "mean.binaryproto"
  }
  data_param {
    source: "train.lmdb"
    batch_size: 32
    backend: LMDB
  }
}
layer {
  name: "googlenet"
  type: "MemoryData"
  top: "data"
  top: "label"
  memory_data_param {
    batch_size: 32
    channels: 3
    height: 224
    width: 224
  }
 include {
    phase: TEST
  }
}
layer {
  bottom: "data"
  top: "conv1/7x7_s2"
  name: "conv1/7x7_s2"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv1/7x7_s2"
  name: "conv1/7x7_s2/bn"
  top: "conv1/7x7_s2/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "conv1/7x7_s2/bn"
  top: "conv1/7x7_s2/bn"
  name: "conv1/relu_7x7"
  type: "ReLU"
}
layer {
  bottom: "conv1/7x7_s2/bn"
  top: "pool1/3x3_s2"
  name: "pool1/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool1/3x3_s2"
  top: "conv2/3x3_reduce"
  name: "conv2/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv2/3x3_reduce"
  name: "conv2/3x3_reduce/bn"
  top: "conv2/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "conv2/3x3_reduce/bn"
  top: "conv2/3x3_reduce/bn"
  name: "conv2/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "conv2/3x3_reduce/bn"
  top: "conv2/3x3"
  name: "conv2/3x3"
  type: "Convolution"
  
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv2/3x3"
  name: "conv2/3x3/bn"
  top: "conv2/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "conv2/3x3/bn"
  top: "conv2/3x3/bn"
  name: "conv2/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "conv2/3x3/bn"
  top: "pool2/3x3_s2"
  name: "pool2/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool2/3x3_s2"
  top: "inception_3a/1x1"
  name: "inception_3a/1x1"
  type: "Convolution"
  
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/1x1"
  name: "inception_3a/1x1/bn"
  top: "inception_3a/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3a/1x1/bn"
  top: "inception_3a/1x1/bn"
  name: "inception_3a/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "pool2/3x3_s2"
  top: "inception_3a/3x3_reduce"
  name: "inception_3a/3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 96
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/3x3_reduce"
  name: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3_reduce/bn"
  name: "inception_3a/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3"
  name: "inception_3a/3x3"
  type: "Convolution"
  convolution_param {
    #num_output: 128
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/3x3"
  name: "inception_3a/3x3/bn"
  top: "inception_3a/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3a/3x3/bn"
  top: "inception_3a/3x3/bn"
  name: "inception_3a/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "pool2/3x3_s2"
  top: "inception_3a/double3x3_reduce"
  name: "inception_3a/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 16
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/double3x3_reduce"
  name: "inception_3a/double3x3_reduce/bn"
  top: "inception_3a/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3a/double3x3_reduce/bn"
  top: "inception_3a/double3x3_reduce/bn"
  name: "inception_3a/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/double3x3_reduce/bn"
  top: "inception_3a/double3x3a"
  name: "inception_3a/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 32
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/double3x3a"
  name: "inception_3a/double3x3a/bn"
  top: "inception_3a/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3a/double3x3a/bn"
  top: "inception_3a/double3x3a/bn"
  name: "inception_3a/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/double3x3a/bn"
  top: "inception_3a/double3x3b"
  name: "inception_3a/double3x3b"
  type: "Convolution"
  convolution_param {
    #num_output: 32
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/double3x3b"
  name: "inception_3a/double3x3b/bn"
  top: "inception_3a/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3a/double3x3b/bn"
  top: "inception_3a/double3x3b/bn"
  name: "inception_3a/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "pool2/3x3_s2"
  top: "inception_3a/pool"
  name: "inception_3a/pool"
  type: "Pooling"
  pooling_param {
    #pool: MAX
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_3a/pool"
  top: "inception_3a/pool_proj"
  name: "inception_3a/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 32
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/pool_proj"
  name: "inception_3a/pool_proj/bn"
  top: "inception_3a/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3a/pool_proj/bn"
  top: "inception_3a/pool_proj/bn"
  name: "inception_3a/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/1x1/bn"
  bottom: "inception_3a/3x3/bn"
  bottom: "inception_3a/double3x3b/bn"
  bottom: "inception_3a/pool_proj/bn"
  top: "inception_3a/output"
  name: "inception_3a/output"
  type: "Concat"
}
layer {
  bottom: "inception_3a/output"
  top: "inception_3b/1x1"
  name: "inception_3b/1x1"
  type: "Convolution"
  convolution_param {
    #num_output: 128
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/1x1"
  name: "inception_3b/1x1/bn"
  top: "inception_3b/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3b/1x1/bn"
  top: "inception_3b/1x1/bn"
  name: "inception_3b/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/output"
  top: "inception_3b/3x3_reduce"
  name: "inception_3b/3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 128
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/3x3_reduce"
  name: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3_reduce/bn"
  name: "inception_3b/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3"
  name: "inception_3b/3x3"
  type: "Convolution"
  convolution_param {
    #num_output: 192
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/3x3"
  name: "inception_3b/3x3/bn"
  top: "inception_3b/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3b/3x3/bn"
  top: "inception_3b/3x3/bn"
  name: "inception_3b/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/output"
  top: "inception_3b/double3x3_reduce"
  name: "inception_3b/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 32
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/double3x3_reduce"
  name: "inception_3b/double3x3_reduce/bn"
  top: "inception_3b/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3b/double3x3_reduce/bn"
  top: "inception_3b/double3x3_reduce/bn"
  name: "inception_3b/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/double3x3_reduce/bn"
  top: "inception_3b/double3x3a"
  name: "inception_3b/double3x3a"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/double3x3a"
  name: "inception_3b/double3x3a/bn"
  top: "inception_3b/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3b/double3x3a/bn"
  top: "inception_3b/double3x3a/bn"
  name: "inception_3b/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/double3x3a/bn"
  top: "inception_3b/double3x3b"
  name: "inception_3b/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/double3x3b"
  name: "inception_3b/double3x3b/bn"
  top: "inception_3b/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3b/double3x3b/bn"
  top: "inception_3b/double3x3b/bn"
  name: "inception_3b/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/output"
  top: "inception_3b/pool"
  name: "inception_3b/pool"
  type: "Pooling"
  pooling_param {
    #pool: MAX
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_3b/pool"
  top: "inception_3b/pool_proj"
  name: "inception_3b/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/pool_proj"
  name: "inception_3b/pool_proj/bn"
  top: "inception_3b/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3b/pool_proj/bn"
  top: "inception_3b/pool_proj/bn"
  name: "inception_3b/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/1x1/bn"
  bottom: "inception_3b/3x3/bn"
  bottom: "inception_3b/double3x3b/bn"
  bottom: "inception_3b/pool_proj/bn"
  top: "inception_3b/output"
  name: "inception_3b/output"
  type: "Concat"
}
layer {
  bottom: "inception_3b/output"
  top: "inception_3c/3x3_reduce"
  name: "inception_3c/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/3x3_reduce"
  name: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3_reduce/bn"
  name: "inception_3c/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3"
  name: "inception_3c/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 160
    pad: 1
    stride: 2
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/3x3"
  name: "inception_3c/3x3/bn"
  top: "inception_3c/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3c/3x3/bn"
  top: "inception_3c/3x3/bn"
  name: "inception_3c/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/output"
  top: "inception_3c/double3x3_reduce"
  name: "inception_3c/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/double3x3_reduce"
  name: "inception_3c/double3x3_reduce/bn"
  top: "inception_3c/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3c/double3x3_reduce/bn"
  top: "inception_3c/double3x3_reduce/bn"
  name: "inception_3c/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/double3x3_reduce/bn"
  top: "inception_3c/double3x3a"
  name: "inception_3c/double3x3a"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/double3x3a"
  name: "inception_3c/double3x3a/bn"
  top: "inception_3c/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3c/double3x3a/bn"
  top: "inception_3c/double3x3a/bn"
  name: "inception_3c/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/double3x3a/bn"
  top: "inception_3c/double3x3b"
  name: "inception_3c/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 1
    stride: 2
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/double3x3b"
  name: "inception_3c/double3x3b/bn"
  top: "inception_3c/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_3c/double3x3b/bn"
  top: "inception_3c/double3x3b/bn"
  name: "inception_3c/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/output"
  top: "inception_3c/pool/3x3_s2"
  name: "inception_3c/pool/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "inception_3c/3x3/bn"
  bottom: "inception_3c/double3x3b/bn"
  bottom: "inception_3c/pool/3x3_s2"
  top: "inception_3c/output"
  name: "inception_3c/output"
  type: "Concat"
}
layer {
  bottom: "inception_3c/output"
  top: "inception_4a/1x1"
  name: "inception_4a/1x1"
  type: "Convolution"
  convolution_param {
    #num_output: 192
    num_output: 224
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/1x1"
  name: "inception_4a/1x1/bn"
  top: "inception_4a/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4a/1x1/bn"
  top: "inception_4a/1x1/bn"
  name: "inception_4a/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/output"
  top: "inception_4a/3x3_reduce"
  name: "inception_4a/3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 96
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/3x3_reduce"
  name: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3_reduce/bn"
  name: "inception_4a/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3"
  name: "inception_4a/3x3"
  type: "Convolution"
  convolution_param {
    #num_output: 208
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/3x3"
  name: "inception_4a/3x3/bn"
  top: "inception_4a/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4a/3x3/bn"
  top: "inception_4a/3x3/bn"
  name: "inception_4a/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/output"
  top: "inception_4a/double3x3_reduce"
  name: "inception_4a/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 16
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/double3x3_reduce"
  name: "inception_4a/double3x3_reduce/bn"
  top: "inception_4a/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4a/double3x3_reduce/bn"
  top: "inception_4a/double3x3_reduce/bn"
  name: "inception_4a/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/double3x3_reduce/bn"
  top: "inception_4a/double3x3a"
  name: "inception_4a/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 48
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/double3x3a"
  name: "inception_4a/double3x3a/bn"
  top: "inception_4a/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4a/double3x3a/bn"
  top: "inception_4a/double3x3a/bn"
  name: "inception_4a/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/double3x3a/bn"
  top: "inception_4a/double3x3b"
  name: "inception_4a/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
## BN
layer {
  bottom: "inception_4a/double3x3b"
  name: "inception_4a/double3x3b/bn"
  top: "inception_4a/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4a/double3x3b/bn"
  top: "inception_4a/double3x3b/bn"
  name: "inception_4a/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/output"
  top: "inception_4a/pool"
  name: "inception_4a/pool"
  type: "Pooling"
  pooling_param {
    #pool: MAX
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_4a/pool"
  top: "inception_4a/pool_proj"
  name: "inception_4a/pool_proj"
  type: "Convolution"
  convolution_param {
    #num_output: 64
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/pool_proj"
  name: "inception_4a/pool_proj/bn"
  top: "inception_4a/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4a/pool_proj/bn"
  top: "inception_4a/pool_proj/bn"
  name: "inception_4a/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/1x1/bn"
  bottom: "inception_4a/3x3/bn"
  bottom: "inception_4a/double3x3b/bn"
  bottom: "inception_4a/pool_proj/bn"
  top: "inception_4a/output"
  name: "inception_4a/output"
  type: "Concat"
}
layer {
  bottom: "inception_4a/output"
  top: "loss1/ave_pool"
  name: "loss1/ave_pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 3
  }
}
layer {
  bottom: "loss1/ave_pool"
  top: "loss1/conv"
  name: "loss1/conv"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss1/conv"
  name: "loss1/conv/bn"
  top: "loss1/conv/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "loss1/conv/bn"
  top: "loss1/conv/bn"
  name: "loss1/relu_conv"
  type: "ReLU"
}
layer {
  bottom: "loss1/conv/bn"
  top: "loss1/fc"
  name: "loss1/fc"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss1/fc"
  name: "loss1/fc/bn"
  top: "loss1/fc/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "loss1/fc/bn"
  top: "loss1/fc/bn"
  name: "loss1/relu_fc"
  type: "ReLU"
}
layer {
  bottom: "loss1/fc/bn"
  top: "loss1/classifier"
  name: "loss1/classifier"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "loss1/classifier"
  bottom: "label"
  top: "loss1/loss1"
  name: "loss1/loss"
  type: "SoftmaxWithLoss"
  loss_weight: 0.3
}
layer {
  bottom: "loss1/classifier"
  bottom: "label"
  top: "loss1/top-1"
  name: "loss1/top-1"
  type: "Accuracy"
  include {
    phase: TEST
  }
}
layer {
  bottom: "loss1/classifier"
  bottom: "label"
  top: "loss1/top-5"
  name: "loss1/top-5"
  type: "Accuracy"
  accuracy_param {
    top_k: 5
  }
  include {
    phase: TEST
  }
}
layer {
  bottom: "inception_4a/output"
  top: "inception_4b/1x1"
  name: "inception_4b/1x1"
  type: "Convolution"
  convolution_param {
    #num_output: 160
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/1x1"
  name: "inception_4b/1x1/bn"
  top: "inception_4b/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4b/1x1/bn"
  top: "inception_4b/1x1/bn"
  name: "inception_4b/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/output"
  top: "inception_4b/3x3_reduce"
  name: "inception_4b/3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 112
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/3x3_reduce"
  name: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3_reduce/bn"
  name: "inception_4b/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3"
  name: "inception_4b/3x3"
  type: "Convolution"
  convolution_param {
    #num_output: 224
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
## BN
layer {
  bottom: "inception_4b/3x3"
  name: "inception_4b/3x3/bn"
  top: "inception_4b/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4b/3x3/bn"
  top: "inception_4b/3x3/bn"
  name: "inception_4b/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/output"
  top: "inception_4b/double3x3_reduce"
  name: "inception_4b/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 24
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
## BN
layer {
  bottom: "inception_4b/double3x3_reduce"
  name: "inception_4b/double3x3_reduce/bn"
  top: "inception_4b/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4b/double3x3_reduce/bn"
  top: "inception_4b/double3x3_reduce/bn"
  name: "inception_4b/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/double3x3_reduce/bn"
  top: "inception_4b/double3x3a"
  name: "inception_4b/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 64
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/double3x3a"
  name: "inception_4b/double3x3a/bn"
  top: "inception_4b/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4b/double3x3a/bn"
  top: "inception_4b/double3x3a/bn"
  name: "inception_4b/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/double3x3a/bn"
  top: "inception_4b/double3x3b"
  name: "inception_4b/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/double3x3b"
  name: "inception_4b/double3x3b/bn"
  top: "inception_4b/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4b/double3x3b/bn"
  top: "inception_4b/double3x3b/bn"
  name: "inception_4b/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/output"
  top: "inception_4b/pool"
  name: "inception_4b/pool"
  type: "Pooling"
  pooling_param {
    #pool: MAX
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_4b/pool"
  top: "inception_4b/pool_proj"
  name: "inception_4b/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/pool_proj"
  name: "inception_4b/pool_proj/bn"
  top: "inception_4b/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4b/pool_proj/bn"
  top: "inception_4b/pool_proj/bn"
  name: "inception_4b/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/1x1/bn"
  bottom: "inception_4b/3x3/bn"
  bottom: "inception_4b/double3x3b/bn"
  bottom: "inception_4b/pool_proj/bn"
  top: "inception_4b/output"
  name: "inception_4b/output"
  type: "Concat"
}
layer {
  bottom: "inception_4b/output"
  top: "inception_4c/1x1"
  name: "inception_4c/1x1"
  type: "Convolution"
  convolution_param {
    #num_output: 128
    num_output: 160
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/1x1"
  name: "inception_4c/1x1/bn"
  top: "inception_4c/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4c/1x1/bn"
  top: "inception_4c/1x1/bn"
  name: "inception_4c/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/output"
  top: "inception_4c/3x3_reduce"
  name: "inception_4c/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/3x3_reduce"
  name: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3_reduce/bn"
  name: "inception_4c/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3"
  name: "inception_4c/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/3x3"
  name: "inception_4c/3x3/bn"
  top: "inception_4c/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4c/3x3/bn"
  top: "inception_4c/3x3/bn"
  name: "inception_4c/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/output"
  top: "inception_4c/double3x3_reduce"
  name: "inception_4c/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 24
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/double3x3_reduce"
  name: "inception_4c/double3x3_reduce/bn"
  top: "inception_4c/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4c/double3x3_reduce/bn"
  top: "inception_4c/double3x3_reduce/bn"
  name: "inception_4c/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/double3x3_reduce/bn"
  top: "inception_4c/double3x3a"
  name: "inception_4c/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 64
    num_output: 160
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/double3x3a"
  name: "inception_4c/double3x3a/bn"
  top: "inception_4c/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4c/double3x3a/bn"
  top: "inception_4c/double3x3a/bn"
  name: "inception_4c/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/double3x3a/bn"
  top: "inception_4c/double3x3b"
  name: "inception_4c/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/double3x3b"
  name: "inception_4c/double3x3b/bn"
  top: "inception_4c/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4c/double3x3b/bn"
  top: "inception_4c/double3x3b/bn"
  name: "inception_4c/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/output"
  top: "inception_4c/pool"
  name: "inception_4c/pool"
  type: "Pooling"
  pooling_param {
    #pool: MAX
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_4c/pool"
  top: "inception_4c/pool_proj"
  name: "inception_4c/pool_proj"
  type: "Convolution"
  convolution_param {
    #num_output: 64
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/pool_proj"
  name: "inception_4c/pool_proj/bn"
  top: "inception_4c/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4c/pool_proj/bn"
  top: "inception_4c/pool_proj/bn"
  name: "inception_4c/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/1x1/bn"
  bottom: "inception_4c/3x3/bn"
  bottom: "inception_4c/double3x3b/bn"
  bottom: "inception_4c/pool_proj/bn"
  top: "inception_4c/output"
  name: "inception_4c/output"
  type: "Concat"
}
layer {
  bottom: "inception_4c/output"
  top: "inception_4d/1x1"
  name: "inception_4d/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/1x1"
  name: "inception_4d/1x1/bn"
  top: "inception_4d/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4d/1x1/bn"
  top: "inception_4d/1x1/bn"
  name: "inception_4d/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/output"
  top: "inception_4d/3x3_reduce"
  name: "inception_4d/3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 144
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/3x3_reduce"
  name: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3_reduce/bn"
  name: "inception_4d/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3"
  name: "inception_4d/3x3"
  type: "Convolution"
  convolution_param {
    #num_output: 288
    num_output: 192
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/3x3"
  name: "inception_4d/3x3/bn"
  top: "inception_4d/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4d/3x3/bn"
  top: "inception_4d/3x3/bn"
  name: "inception_4d/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/output"
  top: "inception_4d/double3x3_reduce"
  name: "inception_4d/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 32
    num_output: 160
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/double3x3_reduce"
  name: "inception_4d/double3x3_reduce/bn"
  top: "inception_4d/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4d/double3x3_reduce/bn"
  top: "inception_4d/double3x3_reduce/bn"
  name: "inception_4d/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/double3x3_reduce/bn"
  top: "inception_4d/double3x3a"
  name: "inception_4d/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 64
    num_output: 192
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/double3x3a"
  name: "inception_4d/double3x3a/bn"
  top: "inception_4d/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4d/double3x3a/bn"
  top: "inception_4d/double3x3a/bn"
  name: "inception_4d/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/double3x3a/bn"
  top: "inception_4d/double3x3b"
  name: "inception_4d/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/double3x3b"
  name: "inception_4d/double3x3b/bn"
  top: "inception_4d/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4d/double3x3b/bn"
  top: "inception_4d/double3x3b/bn"
  name: "inception_4d/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/output"
  top: "inception_4d/pool"
  name: "inception_4d/pool"
  type: "Pooling"
  pooling_param {
    #pool: MAX
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_4d/pool"
  top: "inception_4d/pool_proj"
  name: "inception_4d/pool_proj"
  type: "Convolution"
  convolution_param {
    #num_output: 64
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/pool_proj"
  name: "inception_4d/pool_proj/bn"
  top: "inception_4d/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4d/pool_proj/bn"
  top: "inception_4d/pool_proj/bn"
  name: "inception_4d/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/1x1/bn"
  bottom: "inception_4d/3x3/bn"
  bottom: "inception_4d/double3x3b/bn"
  bottom: "inception_4d/pool_proj/bn"
  top: "inception_4d/output"
  name: "inception_4d/output"
  type: "Concat"
}
layer {
  bottom: "inception_4d/output"
  top: "loss2/ave_pool"
  name: "loss2/ave_pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 3
  }
}
layer {
  bottom: "loss2/ave_pool"
  top: "loss2/conv"
  name: "loss2/conv"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss2/conv"
  name: "loss2/conv/bn"
  top: "loss2/conv/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "loss2/conv/bn"
  top: "loss2/conv/bn"
  name: "loss2/relu_conv"
  type: "ReLU"
}
layer {
  bottom: "loss2/conv/bn"
  top: "loss2/fc"
  name: "loss2/fc"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss2/fc"
  name: "loss2/fc/bn"
  top: "loss2/fc/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "loss2/fc/bn"
  top: "loss2/fc/bn"
  name: "loss2/relu_fc"
  type: "ReLU"
}
layer {
  bottom: "loss2/fc/bn"
  top: "loss2/classifier"
  name: "loss2/classifier"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "loss2/classifier"
  bottom: "label"
  top: "loss2/loss1"
  name: "loss2/loss"
  type: "SoftmaxWithLoss"
  loss_weight: 0.3
}
layer {
  bottom: "loss2/classifier"
  bottom: "label"
  top: "loss2/top-1"
  name: "loss2/top-1"
  type: "Accuracy"
  include {
    phase: TEST
  }
}
layer {
  bottom: "loss2/classifier"
  bottom: "label"
  top: "loss2/top-5"
  name: "loss2/top-5"
  type: "Accuracy"
  accuracy_param {
    top_k: 5
  }
  include {
    phase: TEST
  }
}
layer {
  bottom: "inception_4d/output"
  top: "inception_4e/3x3_reduce"
  name: "inception_4e/3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 160
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/3x3_reduce"
  name: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3_reduce/bn"
  name: "inception_4e/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3"
  name: "inception_4e/3x3"
  type: "Convolution"
  convolution_param {
    #num_output: 320
    num_output: 192
    pad: 1
    stride: 2
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/3x3"
  name: "inception_4e/3x3/bn"
  top: "inception_4e/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4e/3x3/bn"
  top: "inception_4e/3x3/bn"
  name: "inception_4e/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/output"
  top: "inception_4e/double3x3_reduce"
  name: "inception_4e/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 32
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/double3x3_reduce"
  name: "inception_4e/double3x3_reduce/bn"
  top: "inception_4e/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4e/double3x3_reduce/bn"
  top: "inception_4e/double3x3_reduce/bn"
  name: "inception_4e/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/double3x3_reduce/bn"
  top: "inception_4e/double3x3a"
  name: "inception_4e/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 128
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/double3x3a"
  name: "inception_4e/double3x3a/bn"
  top: "inception_4e/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4e/double3x3a/bn"
  top: "inception_4e/double3x3a/bn"
  name: "inception_4e/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/double3x3a/bn"
  top: "inception_4e/double3x3b"
  name: "inception_4e/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    stride: 2
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/double3x3b"
  name: "inception_4e/double3x3b/bn"
  top: "inception_4e/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_4e/double3x3b/bn"
  top: "inception_4e/double3x3b/bn"
  name: "inception_4e/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/output"
  top: "inception_4e/pool/3x3_s2"
  name: "inception_4e/pool/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "inception_4e/3x3/bn"
  bottom: "inception_4e/double3x3b/bn"
  bottom: "inception_4e/pool/3x3_s2"
  top: "inception_4e/output"
  name: "inception_4e/output"
  type: "Concat"
}
layer {
  bottom: "inception_4e/output"
  top: "inception_5a/1x1"
  name: "inception_5a/1x1"
  type: "Convolution"
  convolution_param {
    #num_output: 256
    num_output: 352
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/1x1"
  name: "inception_5a/1x1/bn"
  top: "inception_5a/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5a/1x1/bn"
  top: "inception_5a/1x1/bn"
  name: "inception_5a/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/output"
  top: "inception_5a/3x3_reduce"
  name: "inception_5a/3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 160
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/3x3_reduce"
  name: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3_reduce/bn"
  name: "inception_5a/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3"
  name: "inception_5a/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/3x3"
  name: "inception_5a/3x3/bn"
  top: "inception_5a/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5a/3x3/bn"
  top: "inception_5a/3x3/bn"
  name: "inception_5a/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/output"
  top: "inception_5a/double3x3_reduce"
  name: "inception_5a/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 32
    num_output: 160
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/double3x3_reduce"
  name: "inception_5a/double3x3_reduce/bn"
  top: "inception_5a/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5a/double3x3_reduce/bn"
  top: "inception_5a/double3x3_reduce/bn"
  name: "inception_5a/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/double3x3_reduce/bn"
  top: "inception_5a/double3x3a"
  name: "inception_5a/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 128
    num_output: 224
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/double3x3a"
  name: "inception_5a/double3x3a/bn"
  top: "inception_5a/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5a/double3x3a/bn"
  top: "inception_5a/double3x3a/bn"
  name: "inception_5a/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/double3x3a/bn"
  top: "inception_5a/double3x3b"
  name: "inception_5a/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 224
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/double3x3b"
  name: "inception_5a/double3x3b/bn"
  top: "inception_5a/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5a/double3x3b/bn"
  top: "inception_5a/double3x3b/bn"
  name: "inception_5a/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/output"
  top: "inception_5a/pool"
  name: "inception_5a/pool"
  type: "Pooling"
  pooling_param {
    #pool: MAX
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_5a/pool"
  top: "inception_5a/pool_proj"
  name: "inception_5a/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/pool_proj"
  name: "inception_5a/pool_proj/bn"
  top: "inception_5a/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5a/pool_proj/bn"
  top: "inception_5a/pool_proj/bn"
  name: "inception_5a/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/1x1/bn"
  bottom: "inception_5a/3x3/bn"
  bottom: "inception_5a/double3x3b/bn"
  bottom: "inception_5a/pool_proj/bn"
  top: "inception_5a/output"
  name: "inception_5a/output"
  type: "Concat"
}
layer {
  bottom: "inception_5a/output"
  top: "inception_5b/1x1"
  name: "inception_5b/1x1"
  type: "Convolution"
  convolution_param {
    #num_output: 384
    num_output: 352
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/1x1"
  name: "inception_5b/1x1/bn"
  top: "inception_5b/1x1/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5b/1x1/bn"
  top: "inception_5b/1x1/bn"
  name: "inception_5b/relu_1x1"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/output"
  top: "inception_5b/3x3_reduce"
  name: "inception_5b/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/3x3_reduce"
  name: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3_reduce/bn"
  name: "inception_5b/relu_3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3"
  name: "inception_5b/3x3"
  type: "Convolution"
  convolution_param {
    #num_output: 384
    num_output: 320
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/3x3"
  name: "inception_5b/3x3/bn"
  top: "inception_5b/3x3/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5b/3x3/bn"
  top: "inception_5b/3x3/bn"
  name: "inception_5b/relu_3x3"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/output"
  top: "inception_5b/double3x3_reduce"
  name: "inception_5b/double3x3_reduce"
  type: "Convolution"
  convolution_param {
    #num_output: 48
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/double3x3_reduce"
  name: "inception_5b/double3x3_reduce/bn"
  top: "inception_5b/double3x3_reduce/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5b/double3x3_reduce/bn"
  top: "inception_5b/double3x3_reduce/bn"
  name: "inception_5b/relu_double3x3_reduce"
  type: "ReLU"
}
layer {
  bottom: "inception_5b/double3x3_reduce/bn"
  top: "inception_5b/double3x3a"
  name: "inception_5b/double3x3a"
  type: "Convolution"
  convolution_param {
    #num_output: 128
    num_output: 224
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/double3x3a"
  name: "inception_5b/double3x3a/bn"
  top: "inception_5b/double3x3a/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5b/double3x3a/bn"
  top: "inception_5b/double3x3a/bn"
  name: "inception_5b/relu_double3x3a"
  type: "ReLU"
}
layer {
  bottom: "inception_5b/double3x3a/bn"
  top: "inception_5b/double3x3b"
  name: "inception_5b/double3x3b"
  type: "Convolution"
  convolution_param {
    num_output: 224
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/double3x3b"
  name: "inception_5b/double3x3b/bn"
  top: "inception_5b/double3x3b/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5b/double3x3b/bn"
  top: "inception_5b/double3x3b/bn"
  name: "inception_5b/relu_double3x3b"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/output"
  top: "inception_5b/pool"
  name: "inception_5b/pool"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
  bottom: "inception_5b/pool"
  top: "inception_5b/pool_proj"
  name: "inception_5b/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/pool_proj"
  name: "inception_5b/pool_proj/bn"
  top: "inception_5b/pool_proj/bn"
  type: "BatchNorm"
  param {
    lr_mult: 0
  } 
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "inception_5b/pool_proj/bn"
  top: "inception_5b/pool_proj/bn"
  name: "inception_5b/relu_pool_proj"
  type: "ReLU"
}
layer {
  bottom: "inception_5b/1x1/bn"
  bottom: "inception_5b/3x3/bn"
  bottom: "inception_5b/double3x3b/bn"
  bottom: "inception_5b/pool_proj/bn"
  top: "inception_5b/output"
  name: "inception_5b/output"
  type: "Concat"
}
layer {
  bottom: "inception_5b/output"
  top: "pool5/7x7_s1"
  name: "pool5/7x7_s1"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 7
    stride: 1
  }
}
layer {
  bottom: "pool5/7x7_s1"
  top: "loss3/classifier"
  name: "loss3/classifier"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss3/loss3"
  type: "SoftmaxWithLoss"
  bottom: "loss3/classifier"
  bottom: "label"
  top: "loss3/loss3"
  loss_weight: 1
}
layer {
  name: "loss3/top-1"
  type: "Accuracy"
  bottom: "loss3/classifier"
  bottom: "label"
  top: "loss3/top-1"
  include {
    phase: TEST
  }
}
#layer {
#  name: "loss3/top-5"
#  type: "Accuracy"
#  bottom: "loss3/classifier"
#  bottom: "label"
#  top: "loss3/top-5"
#  include {
#    phase: TEST
#  }
#  accuracy_param {
#    top_k: 5
#  }
#}
layer {
  name: "probt"
  type: "Softmax"
  bottom: "loss3/classifier"
  top: "probt"
  include {
    phase: TEST
  }
}