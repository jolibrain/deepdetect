From d138800194b30253fbaef820859d9219c47d380c Mon Sep 17 00:00:00 2001
From: Julien CHICHA <julien.chicha@epitech.eu>
Date: Fri, 18 May 2018 16:20:35 +0200
Subject: [PATCH 1/2] replaced logging system with the caffe_dd one

---
 caffe/llogging.h                         | 258 +++++++++++++++++++++++++++++++
 caffe2/core/logging.cc                   | 167 +-------------------
 caffe2/core/logging.h                    |  10 --
 caffe2/core/logging_is_not_google_glog.h | 241 ++++++-----------------------
 4 files changed, 306 insertions(+), 370 deletions(-)
 create mode 100644 caffe/llogging.h

diff --git a/caffe/llogging.h b/caffe/llogging.h
new file mode 100644
index 0000000..c3b8839
--- /dev/null
+++ b/caffe/llogging.h
@@ -0,0 +1,258 @@
+/**
+ * Author: Emmanuel Benazera <beniz@droidnik.fr>
+ */
+
+#ifndef LLOGGING_H
+#define LLOGGING_H
+
+#include <spdlog/spdlog.h>
+#include <boost/algorithm/string.hpp>
+#include <iostream>
+
+class DateLogger {
+ public:
+  DateLogger() {
+#if defined(_MSC_VER)
+    _tzset();
+#endif
+  }
+  const char* HumanDate() {
+#if defined(_MSC_VER)
+    _strtime_s(buffer_, sizeof(buffer_));
+#else
+    time_t time_value = time(NULL);
+    struct tm *pnow;
+#if !defined(_WIN32)
+    struct tm now;
+    pnow = localtime_r(&time_value, &now);
+#else
+    pnow = localtime(&time_value);  // NOLINT(*)
+#endif
+    snprintf(buffer_, sizeof(buffer_), "%02d:%02d:%02d",
+             pnow->tm_hour, pnow->tm_min, pnow->tm_sec);
+#endif
+    return buffer_;
+  }
+
+ private:
+  char buffer_[9];
+};
+
+// avoid fatal checks from glog
+#define CAFFE_THROW_ON_ERROR
+
+// make sure we erase definitions by glog if any
+#undef LOG
+#undef LOG_IF
+#undef CHECK
+#undef CHECK_OP_LOG
+#undef CHECK_EQ
+#undef CHECK_LT
+#undef CHECK_GT
+#undef CHECK_LE
+#undef CHECK_GE
+#undef CHECK_EQ
+#undef CHECK_NE
+#undef CHECK_OP_LOG
+#undef CHECK_NOTNULL
+#undef DCHECK
+#undef DCHECK_LT
+#undef DCHECK_GT
+#undef DCHECK_LE
+#undef DCHECK_GE
+#undef DCHECK_EQ
+#undef DCHECK_NE
+#undef DLOG
+#undef DFATAL
+#undef LOG_DFATAL
+#undef LOG_EVERY_N
+
+#ifdef CAFFE_THROW_ON_ERROR
+#include <sstream>
+#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
+		 ( std::ostringstream() << std::dec << x ) ).str()
+class CaffeErrorException : public std::exception
+{
+public:
+  CaffeErrorException(const std::string &s):_s(s) {}
+  ~CaffeErrorException() throw() {}
+  const char* what() const throw() { return _s.c_str(); }
+  std::string _s;
+};
+
+static std::string INFO="INFO";
+static std::string WARNING="WARNING";
+static std::string ERROR="ERROR";
+static std::string FATAL="FATAL";
+
+#define GLOG_NO_ABBREVIATED_SEVERITIES
+
+#define INFO INFO
+#define WARNING WARNING
+#define ERROR ERROR
+#define FATAL FATAL
+
+static std::ostream nullstream(0);
+
+#define CHECK(condition)						\
+  if (!(condition)) \
+    throw CaffeErrorException(std::string(__FILE__) + ":" + SSTR(__LINE__) + " / Check failed (custom): " #condition ""); \
+  nullstream									\
+  << "Check failed (custom): " #condition " "
+
+#define CHECK_LT(x, y) CHECK((x) < (y))
+#define CHECK_GT(x, y) CHECK((x) > (y))
+#define CHECK_LE(x, y) CHECK((x) <= (y))
+#define CHECK_GE(x, y) CHECK((x) >= (y))
+#define CHECK_EQ(x, y) CHECK((x) == (y))
+#define CHECK_NE(x, y) CHECK((x) != (y))
+
+#define CHECK_OP_LOG(name, op, val1, val2, log) CHECK((val1) op (val2))
+#ifdef DEBUG
+#define CHECK_EQ(val1,val2) if (0) std::cerr
+#endif
+#endif
+
+#define CHECK_NOTNULL(x) \
+  ((x) == NULL ? LOG(FATAL) << "Check  notnull: "  #x << ' ', (x) : (x)) // NOLINT(*)
+
+#ifdef NDEBUG
+#define DCHECK(x) \
+  while (false) CHECK(x)
+#define DCHECK_LT(x, y) \
+  while (false) CHECK((x) < (y))
+#define DCHECK_GT(x, y) \
+  while (false) CHECK((x) > (y))
+#define DCHECK_LE(x, y) \
+  while (false) CHECK((x) <= (y))
+#define DCHECK_GE(x, y) \
+  while (false) CHECK((x) >= (y))
+#define DCHECK_EQ(x, y) \
+  while (false) CHECK((x) == (y))
+#define DCHECK_NE(x, y) \
+  while (false) CHECK((x) != (y))
+#else
+#define DCHECK(x) CHECK(x)
+#define DCHECK_LT(x, y) CHECK((x) < (y))
+#define DCHECK_GT(x, y) CHECK((x) > (y))
+#define DCHECK_LE(x, y) CHECK((x) <= (y))
+#define DCHECK_GE(x, y) CHECK((x) >= (y))
+#define DCHECK_EQ(x, y) CHECK((x) == (y))
+#define DCHECK_NE(x, y) CHECK((x) != (y))
+#endif  // NDEBUG
+
+class CaffeLogger
+{
+ public:
+  CaffeLogger(const std::string &severity)
+    :_severity(severity)
+  {
+    _console = spdlog::get("caffe");
+    if (!_console)
+#ifdef USE_SYSLOG
+      _console = spdlog::syslog_logger("caffe");
+#else
+      _console = spdlog::stdout_logger_mt("caffe");
+#endif
+  }
+
+  ~CaffeLogger()
+    {
+      if (_severity == "none" || _str.empty()) // ignore
+	{}
+      else if (_severity == INFO)
+	_console->info(_str);
+      else if (_severity == WARNING)
+	_console->warn(_str);
+      else if (_severity == ERROR)
+	_console->error(_str);
+    }
+  
+  friend CaffeLogger& operator<<(const CaffeLogger &cl, const std::string &rstr)
+  {
+    std::string str = rstr;
+    const_cast<CaffeLogger&>(cl)._str += str;
+    return const_cast<CaffeLogger&>(cl);
+  }
+
+  friend CaffeLogger& operator<<(const CaffeLogger &cl, const double &d)
+  {
+    std::string str = std::to_string(d);
+    boost::trim_right_if(str,boost::is_any_of("\n"));
+    const_cast<CaffeLogger&>(cl)._str += str;
+    return const_cast<CaffeLogger&>(cl);
+  }
+
+  friend CaffeLogger& operator<<(const CaffeLogger &cl, const std::ostream &out)
+  {
+    std::stringstream sstr;
+    sstr << out.rdbuf();
+    const_cast<CaffeLogger&>(cl)._str += sstr.str();
+    return const_cast<CaffeLogger&>(cl);
+  }
+  
+  std::string _severity = INFO;
+  std::shared_ptr<spdlog::logger> _console;
+  std::string _str;
+};
+
+inline CaffeLogger LOG(const std::string &severity)
+{
+  if (severity != FATAL)
+  {
+    return CaffeLogger(severity);
+  }
+  else
+    {
+      throw CaffeErrorException(std::string(__FILE__) + ":" + SSTR(__LINE__) + " / Fatal Caffe error"); // XXX: cannot report the exact location of the trigger...
+    }
+}
+
+inline CaffeLogger LOG_IF(const std::string &severity,const bool &condition)
+{
+  if (condition)
+    return LOG(severity);
+  else return CaffeLogger("none");
+}
+
+#ifdef NDEBUG
+inline CaffeLogger DFATAL(const std::string &severity)
+{
+  (void)severity;
+  return CaffeLogger("none");
+}
+inline CaffeLogger LOG_DFATAL(const std::string &severity)
+{
+  (void)severity;
+  return CaffeLogger("none");
+}
+inline CaffeLogger DLOG(const std::string &severity)
+{
+  (void)severity;
+  return CaffeLogger("none");
+}
+#else
+inline CaffeLogger DFATAL(const std::string &severity)
+{
+  (void)severity;
+  return LOG(FATAL);
+}
+inline CaffeLogger LOG_DFATAL(const std::string &severity)
+{
+  (void)severity;
+  return LOG(FATAL);
+}
+inline CaffeLogger DLOG(const std::string &severity)
+{
+  return LOG(severity);
+}
+#endif
+
+// Poor man's version...
+inline CaffeLogger LOG_EVERY_N(const std::string &severity, const int &n)
+{
+  (void)n;
+  return LOG(severity);
+}
+
+#endif
diff --git a/caffe2/core/logging.cc b/caffe2/core/logging.cc
index 3681bea..1bd8a90 100644
--- a/caffe2/core/logging.cc
+++ b/caffe2/core/logging.cc
@@ -98,170 +98,7 @@ const void* EnforceNotMet::caller() const noexcept {
 
 }  // namespace caffe2
 
-
-#ifdef CAFFE2_USE_GOOGLE_GLOG
-
-#ifdef CAFFE2_USE_GFLAGS
-// GLOG's minloglevel
-CAFFE2_DECLARE_int(minloglevel);
-// GLOG's verbose log value.
-CAFFE2_DECLARE_int(v);
-// GLOG's logtostderr value
-CAFFE2_DECLARE_bool(logtostderr);
-
-#else
-
-using fLI::FLAGS_minloglevel;
-using fLI::FLAGS_v;
-using fLB::FLAGS_logtostderr;
-
-#endif // CAFFE2_USE_GFLAGS
-
-CAFFE2_DEFINE_int(caffe2_log_level, google::GLOG_ERROR,
-                  "The minimum log level that caffe2 will output.");
-
-// Google glog's api does not have an external function that allows one to check
-// if glog is initialized or not. It does have an internal function - so we are
-// declaring it here. This is a hack but has been used by a bunch of others too
-// (e.g. Torch).
-namespace google {
-namespace glog_internal_namespace_ {
-bool IsGoogleLoggingInitialized();
-}  // namespace glog_internal_namespace_
-}  // namespace google
-
-
 namespace caffe2 {
-bool InitCaffeLogging(int* argc, char** argv) {
-  if (*argc == 0) return true;
-#if !defined(_MSC_VER)
-  // This trick can only be used on UNIX platforms
-  if (!::google::glog_internal_namespace_::IsGoogleLoggingInitialized())
-#endif
-  {
-    ::google::InitGoogleLogging(argv[0]);
-#if !defined(_MSC_VER)
-  // This is never defined on Windows
-    ::google::InstallFailureSignalHandler();
-#endif
-  }
-  // If caffe2_log_level is set and is lower than the min log level by glog,
-  // we will transfer the caffe2_log_level setting to glog to override that.
-  FLAGS_minloglevel = std::min(FLAGS_caffe2_log_level, FLAGS_minloglevel);
-  // If caffe2_log_level is explicitly set, let's also turn on logtostderr.
-  if (FLAGS_caffe2_log_level < google::GLOG_ERROR) {
-    FLAGS_logtostderr = 1;
-  }
-  // Also, transfer the caffe2_log_level verbose setting to glog.
-  if (FLAGS_caffe2_log_level < 0) {
-    FLAGS_v = std::min(FLAGS_v, -FLAGS_caffe2_log_level);
-  }
-  return true;
+  bool InitCaffeLogging(int* argc, char** argv) { return true; }
+  void ShowLogInfoToStderr() {}
 }
-
-void ShowLogInfoToStderr() {
-  FLAGS_logtostderr = 1;
-  FLAGS_minloglevel = std::min(FLAGS_minloglevel, google::GLOG_INFO);
-}
-}  // namespace caffe2
-
-#else  // !CAFFE2_USE_GOOGLE_GLOG
-
-#ifdef ANDROID
-#include <android/log.h>
-#endif // ANDROID
-
-CAFFE2_DEFINE_int(caffe2_log_level, ERROR,
-                  "The minimum log level that caffe2 will output.");
-
-namespace caffe2 {
-bool InitCaffeLogging(int* argc, char** argv) {
-  // When doing InitCaffeLogging, we will assume that caffe's flag paser has
-  // already finished.
-  if (*argc == 0) return true;
-  if (!CommandLineFlagsHasBeenParsed()) {
-    std::cerr << "InitCaffeLogging() has to be called after "
-                 "ParseCaffeCommandLineFlags. Modify your program to make sure "
-                 "of this." << std::endl;
-    return false;
-  }
-  if (FLAGS_caffe2_log_level > FATAL) {
-    std::cerr << "The log level of Caffe2 has to be no larger than FATAL("
-              << FATAL << "). Capping it to FATAL." << std::endl;
-    FLAGS_caffe2_log_level = FATAL;
-  }
-  return true;
-}
-
-void ShowLogInfoToStderr() {
-  FLAGS_caffe2_log_level = INFO;
-}
-
-MessageLogger::MessageLogger(const char *file, int line, int severity)
-  : severity_(severity) {
-  if (severity_ < FLAGS_caffe2_log_level) {
-    // Nothing needs to be logged.
-    return;
-  }
-#ifdef ANDROID
-  tag_ = "native";
-#else  // !ANDROID
-  tag_ = "";
-#endif  // ANDROID
-  /*
-  time_t rawtime;
-  struct tm * timeinfo;
-  time(&rawtime);
-  timeinfo = localtime(&rawtime);
-  std::chrono::nanoseconds ns =
-      std::chrono::duration_cast<std::chrono::nanoseconds>(
-          std::chrono::high_resolution_clock::now().time_since_epoch());
-  */
-  stream_ << "[" << CAFFE2_SEVERITY_PREFIX[std::min(4, FATAL - severity_)]
-          //<< (timeinfo->tm_mon + 1) * 100 + timeinfo->tm_mday
-          //<< std::setfill('0')
-          //<< " " << std::setw(2) << timeinfo->tm_hour
-          //<< ":" << std::setw(2) << timeinfo->tm_min
-          //<< ":" << std::setw(2) << timeinfo->tm_sec
-          //<< "." << std::setw(9) << ns.count() % 1000000000
-          << " " << StripBasename(std::string(file)) << ":" << line << "] ";
-}
-
-// Output the contents of the stream to the proper channel on destruction.
-MessageLogger::~MessageLogger() {
-  if (severity_ < FLAGS_caffe2_log_level) {
-    // Nothing needs to be logged.
-    return;
-  }
-  stream_ << "\n";
-#ifdef ANDROID
-  static const int android_log_levels[] = {
-      ANDROID_LOG_FATAL,    // LOG_FATAL
-      ANDROID_LOG_ERROR,    // LOG_ERROR
-      ANDROID_LOG_WARN,     // LOG_WARNING
-      ANDROID_LOG_INFO,     // LOG_INFO
-      ANDROID_LOG_DEBUG,    // VLOG(1)
-      ANDROID_LOG_VERBOSE,  // VLOG(2) .. VLOG(N)
-  };
-  int android_level_index = FATAL - std::min(FATAL, severity_);
-  int level = android_log_levels[std::min(android_level_index, 5)];
-  // Output the log string the Android log at the appropriate level.
-  __android_log_print(level, tag_, "%s", stream_.str().c_str());
-  // Indicate termination if needed.
-  if (severity_ == FATAL) {
-    __android_log_print(ANDROID_LOG_FATAL, tag_, "terminating.\n");
-  }
-#else  // !ANDROID
-  if (severity_ >= FLAGS_caffe2_log_level) {
-    // If not building on Android, log all output to std::cerr.
-    std::cerr << stream_.str();
-  }
-#endif  // ANDROID
-  if (severity_ == FATAL) {
-    DealWithFatal();
-  }
-}
-
-}  // namespace caffe2
-
-#endif  // !CAFFE2_USE_GOOGLE_GLOG
diff --git a/caffe2/core/logging.h b/caffe2/core/logging.h
index ad9a57e..54371dc 100644
--- a/caffe2/core/logging.h
+++ b/caffe2/core/logging.h
@@ -19,14 +19,8 @@
 #define CAFFE2_LOG_THRESHOLD INT_MIN
 #endif // CAFFE2_LOG_THRESHOLD
 
-// Below are different implementations for glog and non-glog cases.
-#ifdef CAFFE2_USE_GOOGLE_GLOG
-#include "caffe2/core/logging_is_google_glog.h"
-#else // !CAFFE2_USE_GOOGLE_GLOG
 #include "caffe2/core/logging_is_not_google_glog.h"
-#endif // CAFFE2_USE_GOOGLE_GLOG
 
-CAFFE2_DECLARE_int(caffe2_log_level);
 CAFFE2_DECLARE_bool(caffe2_use_fatal_for_enforce);
 
 namespace caffe2 {
@@ -34,11 +28,7 @@ namespace caffe2 {
 bool InitCaffeLogging(int* argc, char** argv);
 
 constexpr bool IsUsingGoogleLogging() {
-#ifdef CAFFE2_USE_GOOGLE_GLOG
-  return true;
-#else
   return false;
-#endif
 }
 
 /**
diff --git a/caffe2/core/logging_is_not_google_glog.h b/caffe2/core/logging_is_not_google_glog.h
index 1db23b7..b4335ae 100644
--- a/caffe2/core/logging_is_not_google_glog.h
+++ b/caffe2/core/logging_is_not_google_glog.h
@@ -1,212 +1,63 @@
 #ifndef CAFFE2_CORE_LOGGING_IS_NOT_GOOGLE_GLOG_H_
 #define CAFFE2_CORE_LOGGING_IS_NOT_GOOGLE_GLOG_H_
 
-#include <chrono>
-#include <climits>
-#include <ctime>
-#include <iomanip>
-#include <string>
-#include <fstream>
-#include <set>
-#include <sstream>
-#include <vector>
-
-#include "caffe2/core/flags.h"
-
-// Log severity level constants.
-const int FATAL   = 3;
-#if !defined(_MSC_VER) || !defined(ERROR)
-// Windows defines the ERROR macro already, and as a result we will
-// simply use that one. The downside is that one will now mix LOG(INFO)
-// and LOG(ERROR) because ERROR is defined to be zero. Anyway, the
-// recommended way is to use glog so fixing this is a low-pri item.
-const int ERROR   = 2;
-#endif
-const int WARNING = 1;
-const int INFO    = 0;
-const char CAFFE2_SEVERITY_PREFIX[] = "FEWIV";
-
-namespace caffe2 {
-class MessageLogger {
- public:
-  MessageLogger(const char *file, int line, int severity);
-  ~MessageLogger();
-  // Return the stream associated with the logger object.
-  std::stringstream &stream() { return stream_; }
+#include "caffe/llogging.h"
 
- private:
-  // When there is a fatal log, we simply abort.
-  void DealWithFatal() { abort(); }
+static const std::string LogLevels[4] = {INFO, WARNING, ERROR, FATAL};
+#define VLOG(n) LOG(LogLevels[n])
 
-  const char* tag_;
-  std::stringstream stream_;
-  int severity_;
-};
+#define LOG_AS_STRING(l, o)			\
+  std::stringstream ss;				\
+  ss << o;					\
+  return l << ss.str();
 
-// This class is used to explicitly ignore values in the conditional
-// logging macros.  This avoids compiler warnings like "value computed
-// is not used" and "statement has no effect".
-class LoggerVoidify {
- public:
-  LoggerVoidify() { }
-  // This has to be an operator with a precedence lower than << but
-  // higher than ?:
-  void operator&(const std::ostream &s) { }
-};
-
-// Log a message and terminate.
-template<class T>
-void LogMessageFatal(const char *file, int line, const T &message) {
-  MessageLogger(file, line, FATAL).stream() << message;
+#include <iomanip>
+inline CaffeLogger &operator<<(CaffeLogger &out, const std::_Setprecision &o) {
+  LOG_AS_STRING(out, o);
 }
-
-// Helpers for CHECK_NOTNULL(). Two are necessary to support both raw pointers
-// and smart pointers.
-template <typename T>
-T& CheckNotNullCommon(const char *file, int line, const char *names, T& t) {
-  if (t == nullptr) {
-    LogMessageFatal(file, line, std::string(names));
-  }
-  return t;
+inline CaffeLogger &operator<<(CaffeLogger &out, std::ostream&(*o)(std::ostream&)) {
+  LOG_AS_STRING(out, o);
 }
-
-template <typename T>
-T* CheckNotNull(const char *file, int line, const char *names, T* t) {
-  return CheckNotNullCommon(file, line, names, t);
+inline CaffeLogger &operator<<(CaffeLogger &out, void *o) {
+  LOG_AS_STRING(out, o);
 }
-
-template <typename T>
-T& CheckNotNull(const char *file, int line, const char *names, T& t) {
-  return CheckNotNullCommon(file, line, names, t);
+inline CaffeLogger &operator<<(CaffeLogger &out, const google::protobuf::Message &o) {
+  return out << o.SerializeAsString();
 }
-}  // namespace caffe2
-
-// ---------------------- Logging Macro definitions --------------------------
-
-
-static_assert(CAFFE2_LOG_THRESHOLD <= FATAL,
-              "CAFFE2_LOG_THRESHOLD should at most be FATAL.");
-// If n is under the compile time caffe log threshold, The _CAFFE_LOG(n)
-// should not generate anything in optimized code.
-#define LOG(n) \
-  if (n >= CAFFE2_LOG_THRESHOLD) \
-    ::caffe2::MessageLogger((char*)__FILE__, __LINE__, n).stream()
-#define VLOG(n) LOG((-n))
-
-#define LOG_IF(n, condition)                    \
-  if (n >= CAFFE2_LOG_THRESHOLD && (condition)) \
-  ::caffe2::MessageLogger((char*)__FILE__, __LINE__, n).stream()
-#define VLOG_IF(n, condition) LOG_IF((-n), (condition))
-
-#define VLOG_IS_ON(verboselevel) (CAFFE2_LOG_THRESHOLD <= -(verboselevel))
-
-// Log only if condition is met.  Otherwise evaluates to void.
-#define FATAL_IF(condition) \
-  condition ? (void) 0 : ::caffe2::LoggerVoidify() & \
-      ::caffe2::MessageLogger((char*)__FILE__, __LINE__, FATAL).stream()
 
-// Check for a given boolean condition.
-#define CHECK(condition) FATAL_IF(condition) \
-        << "Check failed: " #condition " "
-
-#ifndef NDEBUG
-// Debug only version of CHECK
-#define DCHECK(condition) FATAL_IF(condition) \
-        << "Check failed: " #condition " "
-#else
-// Optimized version - generates no code.
-#define DCHECK(condition) if(false) CHECK(condition)
-#endif  // NDEBUG
-
-#define CHECK_OP(val1, val2, op) FATAL_IF((val1 op val2)) \
-  << "Check failed: " #val1 " " #op " " #val2 " "
-
-// Check_op macro definitions
-#define CHECK_EQ(val1, val2) CHECK_OP(val1, val2, ==)
-#define CHECK_NE(val1, val2) CHECK_OP(val1, val2, !=)
-#define CHECK_LE(val1, val2) CHECK_OP(val1, val2, <=)
-#define CHECK_LT(val1, val2) CHECK_OP(val1, val2, <)
-#define CHECK_GE(val1, val2) CHECK_OP(val1, val2, >=)
-#define CHECK_GT(val1, val2) CHECK_OP(val1, val2, >)
-
-#ifndef NDEBUG
-// Debug only versions of CHECK_OP macros.
-#define DCHECK_EQ(val1, val2) CHECK_OP(val1, val2, ==)
-#define DCHECK_NE(val1, val2) CHECK_OP(val1, val2, !=)
-#define DCHECK_LE(val1, val2) CHECK_OP(val1, val2, <=)
-#define DCHECK_LT(val1, val2) CHECK_OP(val1, val2, <)
-#define DCHECK_GE(val1, val2) CHECK_OP(val1, val2, >=)
-#define DCHECK_GT(val1, val2) CHECK_OP(val1, val2, >)
-#else  // !NDEBUG
-// These versions generate no code in optimized mode.
-#define DCHECK_EQ(val1, val2) if(false) CHECK_OP(val1, val2, ==)
-#define DCHECK_NE(val1, val2) if(false) CHECK_OP(val1, val2, !=)
-#define DCHECK_LE(val1, val2) if(false) CHECK_OP(val1, val2, <=)
-#define DCHECK_LT(val1, val2) if(false) CHECK_OP(val1, val2, <)
-#define DCHECK_GE(val1, val2) if(false) CHECK_OP(val1, val2, >=)
-#define DCHECK_GT(val1, val2) if(false) CHECK_OP(val1, val2, >)
-#endif  // NDEBUG
-
-// Check that a pointer is not null.
-#define CHECK_NOTNULL(val) \
-  ::caffe2::CheckNotNull( \
-      __FILE__, __LINE__, "Check failed: '" #val "' Must be non NULL", (val))
-
-#ifndef NDEBUG
-// Debug only version of CHECK_NOTNULL
-#define DCHECK_NOTNULL(val) \
-  ::caffe2::CheckNotNull( \
-      __FILE__, __LINE__, "Check failed: '" #val "' Must be non NULL", (val))
-#else  // !NDEBUG
-// Optimized version - generates no code.
-#define DCHECK_NOTNULL(val) if (false) CHECK_NOTNULL(val)
-#endif  // NDEBUG
-
-// ---------------------- Support for std objects --------------------------
-// These are adapted from glog to support a limited set of logging capability
-// for STL objects.
-
-namespace caffe2 {
-// Forward declare these two, and define them after all the container streams
-// operators so that we can recurse from pair -> container -> container -> pair
-// properly.
-template<class First, class Second>
-std::ostream& operator<<(
-    std::ostream& out, const std::pair<First, Second>& p);
-template <class Iter>
-void PrintSequence(std::ostream& ss, Iter begin, Iter end);
+#define LOG_PAIR(s)							\
+  template<class First, class Second>					\
+  inline s& operator<<(s& out, const std::pair<First, Second>& p) {	\
+    return out << '(' << p.first << ", " << p.second << ')';		\
+  }
 
-#define INSTANTIATE_FOR_CONTAINER(container) \
-template <class... Types> \
-std::ostream& operator<<( \
-    std::ostream& out, const container<Types...>& seq) { \
-  PrintSequence(out, seq.begin(), seq.end()); \
-  return out; \
-}
+LOG_PAIR(std::ostream)
+LOG_PAIR(CaffeLogger)
+
+#define LOG_CONTAINER(s, c)						\
+  template <class... Types>						\
+  s& operator<<(s& out, const c<Types...>& seq) {			\
+    int i = 0;								\
+    for (auto it = seq.begin(); it != seq.end(); ++it) {		\
+      if (i++) {							\
+	out << ' ';							\
+      }									\
+      if (i > 100) {							\
+	return out << "...";						\
+      }									\
+      out << *it;							\
+    }									\
+    return out;								\
+  }
 
-INSTANTIATE_FOR_CONTAINER(std::vector)
-INSTANTIATE_FOR_CONTAINER(std::map)
-INSTANTIATE_FOR_CONTAINER(std::set)
-#undef INSTANTIATE_FOR_CONTAINER
+LOG_CONTAINER(std::ostream, std::vector)
+LOG_CONTAINER(std::ostream, std::map)
+LOG_CONTAINER(std::ostream, std::set)
 
-template<class First, class Second>
-inline std::ostream& operator<<(
-    std::ostream& out, const std::pair<First, Second>& p) {
-  out << '(' << p.first << ", " << p.second << ')';
-  return out;
-}
+LOG_CONTAINER(CaffeLogger, std::vector)
+LOG_CONTAINER(CaffeLogger, std::map)
+LOG_CONTAINER(CaffeLogger, std::set)
 
-template <class Iter>
-inline void PrintSequence(std::ostream& out, Iter begin, Iter end) {
-  // Output at most 100 elements -- appropriate if used for logging.
-  for (int i = 0; begin != end && i < 100; ++i, ++begin) {
-    if (i > 0) out << ' ';
-    out << *begin;
-  }
-  if (begin != end) {
-    out << " ...";
-  }
-}
-}  // namespace caffe2
+#define VLOG_IS_ON(n) true
 
 #endif  // CAFFE2_CORE_LOGGING_IS_NOT_GOOGLE_GLOG_H_
-- 
2.7.4


From eb8d8121ff93db48418a722ebaeee90bfd530012 Mon Sep 17 00:00:00 2001
From: Julien CHICHA <julien.chicha@epitech.eu>
Date: Fri, 25 May 2018 09:53:59 +0200
Subject: [PATCH 2/2] Minimizing caffe2 verbosisty

---
 caffe2/core/logging_is_not_google_glog.h | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/caffe2/core/logging_is_not_google_glog.h b/caffe2/core/logging_is_not_google_glog.h
index b4335ae..b7f8924 100644
--- a/caffe2/core/logging_is_not_google_glog.h
+++ b/caffe2/core/logging_is_not_google_glog.h
@@ -3,8 +3,9 @@
 
 #include "caffe/llogging.h"
 
-static const std::string LogLevels[4] = {INFO, WARNING, ERROR, FATAL};
-#define VLOG(n) LOG(LogLevels[n])
+#define DEBUG "none"
+static const std::string VLogLevels[4] = {DEBUG, DEBUG, ERROR, DEBUG};
+#define VLOG(n) LOG(VLogLevels[n])
 
 #define LOG_AS_STRING(l, o)			\
   std::stringstream ss;				\
-- 
2.7.4

